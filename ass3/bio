#!/usr/bin/python3
# COMP3311 20T3 Ass3 ... get Name's biography/filmography

import sys
import psycopg2
#from helpers import whatever, functions, you, need
from helpers import print_massage_and_exit

# define any local helper functions here

# set up some globals

usage = "Usage: bio 'NamePattern' [Year]"
db = None
dbname = "imdb"

# process command-line args

argc = len(sys.argv)
if argc != 2 and argc != 3:
  print_massage_and_exit(usage)

input_name = sys.argv[1]
input_year = None
if argc == 3:
  if sys.argv[2].isnumeric():
    input_year = sys.argv[2]
  else:
    print_massage_and_exit(usage)
# manipulate database

try:
  db = psycopg2.connect("dbname="+dbname)
  cur = db.cursor()
  if input_year == None:
    cur.execute("""
    select *
    from names
    where name ~* %s
    order by name,birth_year, id
    """,[input_name])
  else:
    cur.execute("""
    select *
    from names
    where name ~* %s
    and birth_year = %s
    order by name,birth_year, id
    """,[input_name,input_year])
  count = 0
  result_str = ""
  person_id = 0
  while(1):
    tmp = cur.fetchone()
    if tmp == None:
      break
    else:
      person_id = tmp[0]
      name = tmp[1]
      birth_year = tmp[2]
      death_year = tmp[3]
      if birth_year == None and death_year == None:
        result_str = result_str + name + ' (???)\n' 
      elif death_year == None:
        result_str = result_str + name + ' (' + str(birth_year) + '-)\n'
      elif birth_year == None:
        result_str = result_str + name + ' (-' + str(death_year) + ')\n'
      else:
        result_str = result_str + name + ' (' + str(birth_year) + '-' + str(death_year) + ')\n'
      count += 1


  if count == 0:
    print_massage_and_exit("No name matching '" + input_name + "'")
  elif count == 1:
    print("Filmography for " + result_str.rstrip('\n'))
    print("===============")
    ##acting role
    cur.execute("""
    select m.title, a.played, m.start_year
    from acting_roles as a
    join movies as m on (a.movie_id = m.id)
    join principals as p on (a.movie_id = p.movie_id and a.name_id = p.name_id)
    where a.name_id = %s
    order by m.start_year, m.title, a.played;
    """,[person_id])
    person_roles = {}
    movie_start_year = {}
    for tmp in cur.fetchall():
      title = tmp[0]
      played = tmp[1]
      movie_start_year[title] = tmp[2]
      roles_res_str = " playing " + played
      if title in person_roles.keys():
        person_roles[title].append(roles_res_str)
      else:
        person_roles[title] = [roles_res_str]
    #crew role
    cur.execute("""
    select m.title, c.role, m.start_year
    from crew_roles as c
    join movies as m on (c.movie_id = m.id)
    join principals as p on (c.movie_id = p.movie_id and c.name_id = p.name_id)
    where c.name_id = %s
    order by m.start_year, m.title, c.role;
    """,[person_id])
    for tmp in cur.fetchall():
      title = tmp[0]
      role = tmp[1]
      movie_start_year[title] = tmp[2]
      crews_res_str = " as " + role.capitalize().replace("_", " ")
      if title in person_roles.keys():
        person_roles[title].append(crews_res_str)
      else:
        person_roles[title] = [crews_res_str]

    #print
    
    for tmp in sorted(movie_start_year.items(), key=lambda x: (x[1],x[0])):
      print(tmp[0] + ' ('+ str(movie_start_year[tmp[0]])+ ')')
      print("\n".join(person_roles[tmp[0]]))



  elif count > 1:
    print("Names matching '" + input_name + "'\n===============")
    print(result_str.rstrip('\n'))


  
except psycopg2.Error as err:
  print("DB error: ", err)
finally:
  if db:
    db.close()

